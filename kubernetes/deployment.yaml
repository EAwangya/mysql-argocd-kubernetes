---
apiVersion: v1
kind: Secret
metadata:
  name: myappdb-secret
type: Opaque
stringData:
  root-password: "admin123"   # change me

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: myappdb-pv
spec:
  capacity:
    storage: 5Gi
  accessModes: ["ReadWriteOnce"]
  persistentVolumeReclaimPolicy: Delete
  hostPath:
    path: /mnt/data/myappdb
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: myappdb-data
spec:
  accessModes: ["ReadWriteOnce"]
  resources:
    requests:
      storage: 5Gi
  volumeName: myappdb-pv

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myappdb
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myappdb
  template:
    metadata:
      labels:
        app: myappdb
    spec:
      securityContext:
        fsGroup: 999
      initContainers:
        - name: cleanup-lostfound
          image: busybox:1.36
          command: ["sh","-c"]
          args:
            - |
              set -eu
              if [ -d /var/lib/mysql/lost+found ]; then
                rm -rf /var/lib/mysql/lost+found
              fi
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
      containers:
        - name: myappdb
          image: eawangya/myappdb
          ports:
            - name: mysql
              containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: myappdb-secret
                  key: root-password
            - name: MYSQL_DATABASE
              value: "myappdb"
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
          # Probes belong on the *main* container, not the initContainer
          startupProbe:
            tcpSocket:
              port: 3306
            failureThreshold: 30   # up to ~5 minutes @ periodSeconds 10
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 30
            periodSeconds: 10
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: myappdb-data

---
apiVersion: v1
kind: Service
metadata:
  name: myappdb
spec:
  selector:
    app: myappdb
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
  type: ClusterIP

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: myapp
spec:
  replicas: 1
  selector:
    matchLabels:
      app: myapp
  template:
    metadata:
      labels:
        app: myapp
    spec:
      initContainers:
        - name: init-myappdb
          image: busybox:1.36
          command: ["sh", "-c"]
          args:
            - |
              set -e
              echo "⏳ Waiting for MySQL on ${DB_HOST}:${DB_PORT} …"
              for i in $(seq 1 60); do
                nc -z "$DB_HOST" "$DB_PORT" >/dev/null 2>&1 && exit 0
                sleep 2
              done
              echo "❌ MySQL not reachable"; exit 1
          env:
            - name: DB_HOST
              value: myappdb
            - name: DB_PORT
              value: "3306"
      containers:
        - name: myapp
          image: eawangya/myapp:latest
          imagePullPolicy: Always
          ports:
            - name: myapp-port
              containerPort: 3000
          env:
            - name: DB_HOST
              value: myappdb
            - name: DB_PORT
              value: "3306"
            - name: DB_USER
              value: root
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: myappdb-secret
                  key: root-password
            - name: DB_NAME
              value: myappdb
---
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  selector:
    app: myapp
  ports:
    - protocol: TCP
      port: 3000
      targetPort: myapp-port
  type: NodePort
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: myapp-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  ingressClassName: nginx
  rules:
    - host: myapp.local
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: myapp-service
                port:
                  number: 3000
